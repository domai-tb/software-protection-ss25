0x26 - ADDI: reg[0x0] = local_var + 0x4
0xD5 - MOVI:  reg[0x1] = 0x1337
0xF6 - MOV:  reg[0x0] = 0x1
0x26 - ADDI: reg[0x0] = local_var + 0x8
0xD5 - MOVI:  reg[0x1] = 0xBEEF
0xF6 - MOV:  reg[0x0] = 0x1
0x26 - ADDI: reg[0x0] = local_var + 0xC
0xD5 - MOVI:  reg[0x1] = 0x0
0xF6 - MOV:  reg[0x0] = 0x1
0x51 - JMP: jump to vip + 1 + 0x4
0xD5 - MOVI:  reg[0x2] = 0x5
0x0 - MOVC:  reg[0x0] = local_var
0x30 - MOV:  reg[0x1] = reg[0x0]
0x0 - CMP: reg[0x3] = reg[0x1] < reg[0x2]
0xE - JNZ: if 0x3 != 0: jump to vip + 1 + 0xD 
0x51 - JMP: jump to vip + 1 + 0x29
0xD5 - MOVI:  reg[0x2] = 0xA
0x0 - MOVC:  reg[0x0] = local_var
0x30 - MOV:  reg[0x1] = reg[0x0]
0x0 - CMP: reg[0x3] = reg[0x1] < reg[0x2]
0xE - JNZ: if 0x3 != 0: jump to vip + 1 + 0xD 
0x51 - JMP: jump to vip + 1 + 0x29
0x26 - ADDI: reg[0x0] = local_var + 0x14
0xD5 - MOVI:  reg[0x1] = 0xA
0xF6 - MOV:  reg[0x0] = 0x1
0x51 - JMP: jump to vip + 1 + 0x4
0x0 - MOVC:  reg[0x2] = local_var
0x30 - MOV:  reg[0x3] = reg[0x2]
0x26 - ADDI: reg[0x0] = local_var + 0x14
0x30 - MOV:  reg[0x1] = reg[0x0]
0xC2 - CMPLE: reg[0x4] = reg[0x1] <= reg[0x3]
0xE - JNZ: if 0x4 != 0: jump to vip + 1 + 0x12 
0x4 - JMP: jump to vip + 1 + 0x12
0x26 - ADDI: reg[0x0] = local_var + 0xC
0x26 - ADDI: reg[0x1] = local_var + 0x4
0x30 - MOV:  reg[0x2] = reg[0x1]
0x26 - ADDI: reg[0x3] = local_var + 0x14
0x30 - MOV:  reg[0x4] = reg[0x3]
0xF1 - XOR: reg[0x5] = reg[0x2] ^ reg[0x4]
0x0 - MOVC:  reg[0x6] = local_var
0x30 - MOV:  reg[0x7] = reg[0x6]
0x66 - ADD: reg[0x8] = reg[0x7] + reg[0x5]
0xF6 - MOV:  reg[0x0] = 0x8
0x26 - ADDI: reg[0x0] = local_var + 0x4
0x26 - ADDI: reg[0x1] = local_var + 0x8
0x30 - MOV:  reg[0x2] = reg[0x1]
0xF6 - MOV:  reg[0x0] = 0x2
0x26 - ADDI: reg[0x0] = local_var + 0x8
0x26 - ADDI: reg[0x1] = local_var + 0xC
0x30 - MOV:  reg[0x2] = reg[0x1]
0xF6 - MOV:  reg[0x0] = 0x2
0x26 - ADDI: reg[0x0] = local_var + 0x14
0x26 - ADDI: reg[0x1] = local_var + 0x14
0x30 - MOV:  reg[0x2] = reg[0x1]
0xD5 - MOVI:  reg[0x3] = 0x1
0x66 - ADD: reg[0x4] = reg[0x3] + reg[0x2]
0xF6 - MOV:  reg[0x0] = 0x4
0x51 - JMP: jump to vip + 1 + 0xFFFFFED7
0x0 - MOVC:  reg[0x2] = local_var
0x30 - MOV:  reg[0x3] = reg[0x2]
0x26 - ADDI: reg[0x0] = local_var + 0x14
0x30 - MOV:  reg[0x1] = reg[0x0]
0xC2 - CMPLE: reg[0x4] = reg[0x1] <= reg[0x3]
0xE - JNZ: if 0x4 != 0: jump to vip + 1 + 0x12 
0x4 - JMP: jump to vip + 1 + 0x12
0x26 - ADDI: reg[0x0] = local_var + 0xC
0x26 - ADDI: reg[0x1] = local_var + 0x4
0x30 - MOV:  reg[0x2] = reg[0x1]
0x26 - ADDI: reg[0x3] = local_var + 0x14
0x30 - MOV:  reg[0x4] = reg[0x3]
0xF1 - XOR: reg[0x5] = reg[0x2] ^ reg[0x4]
0x0 - MOVC:  reg[0x6] = local_var
0x30 - MOV:  reg[0x7] = reg[0x6]
0x66 - ADD: reg[0x8] = reg[0x7] + reg[0x5]
0xF6 - MOV:  reg[0x0] = 0x8
0x26 - ADDI: reg[0x0] = local_var + 0x4
0x26 - ADDI: reg[0x1] = local_var + 0x8
0x30 - MOV:  reg[0x2] = reg[0x1]
0xF6 - MOV:  reg[0x0] = 0x2
0x26 - ADDI: reg[0x0] = local_var + 0x8
0x26 - ADDI: reg[0x1] = local_var + 0xC
0x30 - MOV:  reg[0x2] = reg[0x1]
0xF6 - MOV:  reg[0x0] = 0x2
0x26 - ADDI: reg[0x0] = local_var + 0x14
0x26 - ADDI: reg[0x1] = local_var + 0x14
0x30 - MOV:  reg[0x2] = reg[0x1]
0xD5 - MOVI:  reg[0x3] = 0x1
0x66 - ADD: reg[0x4] = reg[0x3] + reg[0x2]
0xF6 - MOV:  reg[0x0] = 0x4
0x51 - JMP: jump to vip + 1 + 0xFFFFFED7
0x0 - MOVC:  reg[0x2] = local_var
0x30 - MOV:  reg[0x3] = reg[0x2]
0x26 - ADDI: reg[0x0] = local_var + 0x14
0x30 - MOV:  reg[0x1] = reg[0x0]
0xC2 - CMPLE: reg[0x4] = reg[0x1] <= reg[0x3]
0xE - JNZ: if 0x4 != 0: jump to vip + 1 + 0x12 
0x4 - JMP: jump to vip + 1 + 0x12
0x26 - ADDI: reg[0x0] = local_var + 0xC
0x26 - ADDI: reg[0x1] = local_var + 0x4
0x30 - MOV:  reg[0x2] = reg[0x1]
0x26 - ADDI: reg[0x3] = local_var + 0x14
0x30 - MOV:  reg[0x4] = reg[0x3]
0xF1 - XOR: reg[0x5] = reg[0x2] ^ reg[0x4]
0x0 - MOVC:  reg[0x6] = local_var
0x30 - MOV:  reg[0x7] = reg[0x6]
0x66 - ADD: reg[0x8] = reg[0x7] + reg[0x5]
0xF6 - MOV:  reg[0x0] = 0x8
0x26 - ADDI: reg[0x0] = local_var + 0x4
0x26 - ADDI: reg[0x1] = local_var + 0x8
0x30 - MOV:  reg[0x2] = reg[0x1]
0xF6 - MOV:  reg[0x0] = 0x2
0x26 - ADDI: reg[0x0] = local_var + 0x8
0x26 - ADDI: reg[0x1] = local_var + 0xC
0x30 - MOV:  reg[0x2] = reg[0x1]
0xF6 - MOV:  reg[0x0] = 0x2
0x26 - ADDI: reg[0x0] = local_var + 0x14
0x26 - ADDI: reg[0x1] = local_var + 0x14
0x30 - MOV:  reg[0x2] = reg[0x1]
0xD5 - MOVI:  reg[0x3] = 0x1
0x66 - ADD: reg[0x4] = reg[0x3] + reg[0x2]
0xF6 - MOV:  reg[0x0] = 0x4
0x51 - JMP: jump to vip + 1 + 0xFFFFFED7
0x0 - MOVC:  reg[0x2] = local_var
0x30 - MOV:  reg[0x3] = reg[0x2]
0x26 - ADDI: reg[0x0] = local_var + 0x14
0x30 - MOV:  reg[0x1] = reg[0x0]
0xC2 - CMPLE: reg[0x4] = reg[0x1] <= reg[0x3]
0xE - JNZ: if 0x4 != 0: jump to vip + 1 + 0x12 
0x51 - JMP: jump to vip + 1 + 0x4
0x51 - JMP: jump to vip + 1 + 0xF2
0x26 - ADDI: reg[0x0] = local_var + 0x10
0x26 - ADDI: reg[0x1] = local_var + 0xC
0x30 - MOV:  reg[0x2] = reg[0x1]
0xF6 - MOV:  reg[0x0] = 0x2
0x51 - JMP: jump to vip + 1 + 0x4
0x26 - ADDI: reg[0x0] = local_var + 0x10
0x30 - MOV:  reg[0x1] = reg[0x0]
0xDD - RET: return reg[0x1]
VM return value: 0x1351
